#include <stdio.h>
#include <stdbool.h>
#include <limits.h>

#define N 4  // Number of tasks/workers

// Define a structure to represent a state in the search tree
struct State {
    int level;
    int assigned[N];  // Keep track of assignments for each worker
    int cost;
};

int costMatrix[N][N] = {
    {9, 2, 7, 8},
    {6, 4, 3, 7},
    {5, 8, 1, 8},
    {7, 6, 9, 4}
};

int minCost = INT_MAX;  // Initialize minimum cost to a very large value
struct State optimalState;

// Function to check if a task is already assigned to a worker
bool isTaskAssigned(int task, int level, struct State state) {
    for (int i = 0; i < level; i++) {
        if (state.assigned[i] == task)
            return true;
    }
    return false;
}

// Function to perform branch and bound for assignment problem
void branchAndBoundAssignment(struct State state) {
    if (state.level == N) {
        if (state.cost < minCost) {
            minCost = state.cost;
            optimalState = state;
        }
        return;
    }

    for (int i = 0; i < N; i++) {
        if (!isTaskAssigned(i, state.level, state)) {
            struct State newState = state;
            newState.assigned[newState.level] = i;
            newState.cost += costMatrix[newState.level][i];
            newState.level++;

            // Bound: If current cost exceeds minimum cost, don't explore further
            if (newState.cost <= minCost) {
                branchAndBoundAssignment(newState);
            }
        }
    }
}

int main() {
    struct State initialState = {0};
    branchAndBoundAssignment(initialState);

    printf("Optimal Assignment:\n");
    for (int i = 0; i < N; i++) {
        printf("Worker %d -> Task %d\n", i, optimalState.assigned[i]);
    }
    printf("Minimum Cost: %d\n", minCost);

    return 0;
}
