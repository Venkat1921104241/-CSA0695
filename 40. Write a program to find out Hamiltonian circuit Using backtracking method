#include <stdio.h>
#include <stdbool.h>

#define V 5  // Number of vertices in the graph

// Function to check if it's safe to add vertex v to the current path
bool isSafe(int v, bool graph[V][V], int path[], int pos) {
    if (!graph[path[pos - 1]][v])
        return false;

    for (int i = 0; i < pos; i++) {
        if (path[i] == v)
            return false;
    }

    return true;
}

// Function to find a Hamiltonian circuit in the graph
bool hamiltonianUtil(bool graph[V][V], int path[], int pos) {
    if (pos == V) {
        if (graph[path[pos - 1]][path[0]])
            return true;
        else
            return false;
    }

    for (int v = 1; v < V; v++) {
        if (isSafe(v, graph, path, pos)) {
            path[pos] = v;

            if (hamiltonianUtil(graph, path, pos + 1))
                return true;

            path[pos] = -1;  // Backtrack
        }
    }

    return false;
}

// Function to find a Hamiltonian circuit in the graph and print the result
void findHamiltonianCircuit(bool graph[V][V]) {
    int path[V];
    for (int i = 0; i < V; i++)
        path[i] = -1;

    path[0] = 0;

    if (hamiltonianUtil(graph, path, 1)) {
        printf("Hamiltonian Circuit found:\n");
        for (int i = 0; i < V; i++)
            printf("%d ", path[i]);
        printf("%d", path[0]);  // Complete the circuit
        printf("\n");
    } else {
        printf("No Hamiltonian Circuit found in the graph.\n");
    }
}

int main() {
    bool graph[V][V] = {
        {0, 1, 1, 1, 0},
        {1, 0, 1, 0, 1},
        {1, 1, 0, 1, 1},
        {1, 0, 1, 0, 1},
        {0, 1, 1, 1, 0}
    };

    findHamiltonianCircuit(graph);

    return 0;
}
